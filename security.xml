<?xml version="1.0"?>

<!-- File name: security.xml 
BSD 3-Clause License

Copyright (c) 2021, 2024, 5 Mode
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<?xml-stylesheet type="text/xsl" href="security.xsl"?>

<CONTENT>
	<ITEM>
    <ID>1</ID>
    <DATE>Thu October 14th 2021</DATE>
    <TITLE>Directory separation</TITLE>
    <BODY><![CDATA[
It is good a practice to separate the resources managed by the web server from all the other scripts, .php, .inc or whatever can remain private to the application. Basically, you can quitely set a Public dir with your php router (usually the index.php file) and the static content of your web app; while in the Private dir you are going to set all the rest of your web app, that you will go to include through the router or other mechanism.
]]></BODY>  
    <SEE/>  
		<SEEURL/>
		<TYPE>tip</TYPE>
    <CAT>security</CAT>
		<INDEX>1</INDEX>
	</ITEM>
  <ITEM>
    <ID>3</ID>
    <DATE>Fri October 15th 2021</DATE>
    <TITLE>Beautiful php, secrets included</TITLE>
    <BODY><![CDATA[
When you are going to write some code that needs to be *recognized* and *served* by the webserver you can write it in a *beautiful* .php extension. When, instead, you are going to write some classes or some reusable code that just needs to be *included* and *not served* to the user it is the time to write a *secret* .inc file. The point is exactly that your frontend webserver is most probably not configured to serve the .inc files. Remember that this choice is safe only when it is adopted in conjunction with a directory separation approach.
]]></BODY>  
    <SEE>Directory separation</SEE>  
		<SEEURL>#1</SEEURL>
		<TYPE>tip</TYPE>
    <CAT>security</CAT>
		<INDEX>2</INDEX>
	</ITEM>
  <ITEM>
    <ID>14</ID>
    <DATE>Tue October 19th 2021</DATE>
    <TITLE>Clients like cookies</TITLE>
    <BODY><![CDATA[      
Must be that session cookies are too sweet, this explains why Javascript persists to like them a lot.. PHP has a number of php.ini settings to protect session cookies and among these session.use_strict_mode and session.cookie_httponly are some of the more important ones. *Strict mode* force the session module to check for session IDs initialized by the module itself and not user generated. *Http only* forbid the cookies access by Javascript in the compatible browsers.
]]></BODY>  
    <SEE>Securing Session INI Settings</SEE>  
		<SEEURL>https://www.php.net/manual/en/session.security.ini.php</SEEURL>
		<TYPE>tip</TYPE>
    <CAT>security</CAT>
		<INDEX>3</INDEX>
	</ITEM>
  <ITEM>
    <ID>15</ID>
    <DATE>Tue October 19th 2021</DATE>
    <TITLE>All the streets take to Rome</TITLE>
    <BODY><![CDATA[      
Honestly one thing is to exaggerate with best practices and one thing is to not care at all, that is true about tuning, that is true about security. Probably the right approach resides still in the middle. An other consideration comes about PHP bugs and hacking, but this is out of the scope of this *tip*. However, if you want to close all in a *safe*, PHP supplies you with a last A+ *pill*: the php.ini open_basedir directive. Setting *open_basedir* with the root path of your web app you force eg. PHP includes or fopen() to handle only scripts contained in it.
]]></BODY>  
    <SEE/>
		<SEEURL/>
		<TYPE>tip</TYPE>
    <CAT>security</CAT>
		<INDEX>4</INDEX>
	</ITEM>  
</CONTENT>
