<?xml version="1.0"?>

<!-- File name: syntax.xml 
BSD 3-Clause License

Copyright (c) 2021, 2024, 5 Mode
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<?xml-stylesheet type="text/xsl" href="syntax.xsl"?>

<CONTENT>
  <ITEM>
    <ID>7</ID>
    <DATE>Sat October 16th 2021</DATE>
    <TITLE>Simplicity makes the trick</TITLE>
    <BODY><![CDATA[      
All of us feel fantastic making great programming. But for one reason or the others, who admitted finally along their careers that *doing it simple* is important was always right: it let us have managiable and reusable code with a strong cut on documentation and commenting. Do it simple for who? Clearly for ourself but mainly for all the other people who work with us and *consume* PHP.
]]></BODY>  
    <SEE/>  
		<SEEURL/>
		<TYPE>tip</TYPE>
    <CAT>syntax</CAT>
		<INDEX>1</INDEX>
	</ITEM>
  <ITEM>
    <ID>8</ID>
    <DATE>Sat October 16th 2021</DATE>
    <TITLE>Null coalescing is yet your friend</TITLE>
    <BODY><![CDATA[      
Undubtly PHP function isset() miss a default value when all of us are searching to add it to its implementation.... Indeed it is quite *simple* to write our own *simple* custom function but let's do it more *simple*, the mysterious null coaleshing operator comes really in handy for our purpose:

echo $var1 ?? $var2;    
]]></BODY>  
    <SEE>Null Coalescing Operator</SEE>  
		<SEEURL>http://php.net/manual/en/language.operators.comparison.php</SEEURL>
		<TYPE>tip</TYPE>
    <CAT>syntax</CAT>
		<INDEX>2</INDEX>
	</ITEM>
  <ITEM>
    <ID>12</ID>
    <DATE>Tue October 19th 2021</DATE>
    <TITLE>'Frictionless coding' mantra</TITLE>
    <BODY><![CDATA[      
Having a rich programming language at your disposal and freedom to invent and coding by our own genius and pragmatism.. letâ€™s say that sometimes could be deleterious. Especially when you are building software with others, in a company, on Github, the rigor of some coding standards is something necessary to facilitate the shared work. About PHP, a cross-committee of the developer community time-to-time update a set of coding standard recommendations named PSR. Rely on PSR coding standards, especially the more generic PSR-1 and PSR-2 ones, is something as *normal* as IDEs like NetBeans have software facilities released to help enforcing their usage. 

Definitely have a look to the PSR coding recommendations: 
]]></BODY>  
    <SEE>PSR-2: Coding Style Guide</SEE>  
		<SEEURL>https://www.php-fig.org/psr/psr-2/</SEEURL>
		<TYPE>tip</TYPE>
    <CAT>syntax</CAT>
		<INDEX>3</INDEX>
	</ITEM>
</CONTENT>
